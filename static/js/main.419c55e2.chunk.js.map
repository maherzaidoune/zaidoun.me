{"version":3,"sources":["utils/Color.js","component/Header.js","component/Actions.js","component/Me.js","App.js","serviceWorker.js","index.js"],"names":["Color","main","mainLight","primary","secondary","white","Header","View","style","styles","header","Text","title","PureComponent","StyleSheet","create","backgroundColor","alignItems","justifyContent","padding","margin","color","fontSize","fontWeight","Actions","flexDirection","calltoaction","flex","Me","info","infotext","Component","textAlign","flexGrow","container","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAQeA,EARD,CACVC,KAAM,UACNC,UAAW,UACXC,QAAU,UACVC,UAAW,UACXC,MAAO,W,6CCDUC,E,iLAEb,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,QAChB,kBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,OAApB,mB,GAJoBC,iBAS9BJ,EAASK,IAAWC,OAAO,CAC7BL,OAAQ,CACNM,gBAAiBhB,EAAMC,KACvBgB,WAAY,SACZC,eAAgB,SAChBC,QAAS,GACTC,OAAQ,IAEVR,MAAO,CACLS,MAAOrB,EAAMK,MACbc,QAAS,GACTH,gBAAiBhB,EAAMG,QACvBmB,SAAU,GACVC,WAAY,SCtBGC,E,iLAEb,OACI,kBAACjB,EAAA,EAAD,CAAMC,MAAO,CAACC,EAAOC,OAAQ,CAACe,cAAe,SACzC,kBAACd,EAAA,EAAD,CAAMH,MAAOC,EAAOiB,cAApB,SACA,kBAACf,EAAA,EAAD,CAAMH,MAAOC,EAAOiB,cAApB,QACA,kBAACf,EAAA,EAAD,CAAMH,MAAOC,EAAOiB,cAApB,gB,GANqBb,iBAW/BJ,EAASK,IAAWC,OAAO,CAC7BL,OAAQ,CACJiB,KAAM,EACNX,gBAAiBhB,EAAMC,KACvBgB,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEbO,aAAc,CACVL,MAAOrB,EAAMK,MACbiB,SAAU,GACVC,WAAY,MACZJ,QAAS,MCvBIS,E,iLAEjB,OACE,kBAACrB,EAAA,EAAD,CAAMC,MAAOC,EAAOoB,MAClB,kBAAClB,EAAA,EAAD,CAAMH,MAAOC,EAAOqB,UAApB,6BAC6B,KAD7B,2CAE0C,kBAACnB,EAAA,EAAD,CAAMH,MAAO,CAACC,EAAOqB,SAAU,CAAET,MAAOrB,EAAMG,QAASmB,SAAU,GAAIH,QAAS,MAA9E,iB,GANlBY,aAY1BtB,EAASK,IAAWC,OAAO,CAC/Be,SAAU,CACRT,MAAOrB,EAAMK,MACbiB,SAAU,GACVH,QAAS,GACTI,WAAY,MACZS,UAAW,UAEbH,KAAM,CACJI,SAAU,EACVjB,gBAAiBhB,EAAMC,KACvBkB,QAAS,MCXb,IAAMV,EAASK,IAAWC,OAAO,CAC/BmB,UAAW,CACTlB,gBAAiBhB,EAAMC,KACvBkB,QAAS,GACTgB,OAAO,SAETzB,OAAQ,CACNiB,KAAM,EACNX,gBAAiBhB,EAAMC,KACvBgB,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEXP,MAAO,CACLS,MAAOrB,EAAMK,MACbc,QAAS,GACTH,gBAAiBhB,EAAMG,QACvBmB,SAAU,GACVC,WAAY,OAEdG,aAAc,CACZL,MAAOrB,EAAMK,MACbiB,SAAU,GACVC,WAAY,MACZJ,QAAS,IAEXW,SAAU,CACRT,MAAOrB,EAAMK,MACbiB,SAAU,GACVC,WAAY,MACZS,UAAW,UAEbH,KAAM,CACJI,SAAU,EACVjB,gBAAiBhB,EAAMC,KACvBkB,QAAS,MAIEiB,EAhDf,WACE,OACE,kBAAC7B,EAAA,EAAD,CAAMC,MAAOC,EAAOyB,WAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.419c55e2.chunk.js","sourcesContent":["const Color = {\n    main: '#071A26',\n    mainLight: '#2D5F73',\n    primary : '#A6174B',\n    secondary: \"#8ABF88\",\n    white: '#d8d8d6'\n};\n\nexport default Color;\n","import React, { PureComponent } from 'react'\nimport { Text, View, StyleSheet } from 'react-native-web'\nimport Color from '../utils/Color';\n\nexport default class Header extends PureComponent {\n    render() {\n        return (\n            <View style={styles.header}>\n                <Text style={styles.title} >Zaidoun.me</Text>\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    header: {\n      backgroundColor: Color.main,\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 10,\n      margin: 20,\n    },\n    title: {\n      color: Color.white,\n      padding: 15,\n      backgroundColor: Color.primary,\n      fontSize: 26,\n      fontWeight: '600'\n    }\n  });","import React, { PureComponent } from 'react'\nimport { Text, View, StyleSheet } from 'react-native-web'\nimport Color from '../utils/Color';\n\nexport default class Actions extends PureComponent {\n    render() {\n        return (\n            <View style={[styles.header, {flexDirection: 'row' }]}>\n                <Text style={styles.calltoaction} >About</Text>\n                <Text style={styles.calltoaction} >Blog</Text>\n                <Text style={styles.calltoaction} >Hire me</Text>\n            </View>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    header: {\n        flex: 0,\n        backgroundColor: Color.main,\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 20,\n    },\n    calltoaction: {\n        color: Color.white,\n        fontSize: 18,\n        fontWeight: '500',\n        padding: 12\n    }\n});","import React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native-web'\nimport Color from '../utils/Color';\n\nexport default class Me extends Component {\n  render() {\n    return (\n      <View style={styles.info}>\n        <Text style={styles.infotext} >\n          My name is Maher Zaidoune.{\"\\n\"}\n          I'm a mobile application developer from <Text style={[styles.infotext, { color: Color.primary, fontSize: 20, padding: 10 }]} >Tunisia</Text>\n        </Text>\n      </View>\n    )\n  }\n}\nconst styles = StyleSheet.create({\n  infotext: {\n    color: Color.white,\n    fontSize: 18,\n    padding: 20,\n    fontWeight: '400',\n    textAlign: 'center'\n  },\n  info: {\n    flexGrow: 1,\n    backgroundColor: Color.main,\n    padding: 10\n  }\n});\n","import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native-web';\nimport Color from './utils/Color';\nimport Header from './component/Header';\nimport Actions from './component/Actions';\nimport Me from './component/Me';\n\nfunction App() {\n  return (\n    <View style={styles.container}>\n      <Header/>\n      <Actions/>\n      <Me/>\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Color.main,\n    padding: 20,\n    height:\"100vh\"\n  },\n  header: {\n    flex: 0,\n    backgroundColor: Color.main,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n  },\n  title: {\n    color: Color.white,\n    padding: 15,\n    backgroundColor: Color.primary,\n    fontSize: 26,\n    fontWeight: '600'\n  },\n  calltoaction: {\n    color: Color.white,\n    fontSize: 18,\n    fontWeight: '500',\n    padding: 12\n  },\n  infotext: {\n    color: Color.white,\n    fontSize: 18,\n    fontWeight: '400',\n    textAlign: 'center'\n  },\n  info: {\n    flexGrow: 1,\n    backgroundColor: Color.main,\n    padding: 10\n  }\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}